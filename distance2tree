### this script turns pair-wise distance list into a
### distance matrix as the standard input for hclust() function in R
### 15/2/2015
library(ape)

### read pair-wise distance list and initiate the distaice matrix
matrix=read.table('new.distance',header=F)
pfm_names=unique(c(as.character(matrix[,2]),as.character(matrix[,1])))
distance_matrix=matrix(NA,length(pfm_names),length(pfm_names))
colnames(distance_matrix)=pfm_names
rownames(distance_matrix)=pfm_names
### fill the matrix to form a "dist" object
for (i in 1:length(matrix[,1])) {
  index_1=which(colnames(distance_matrix)==matrix[i,1]);
  index_2=which(rownames(distance_matrix)==matrix[i,2]);
  ### index is both the index of row and col for any given 
  ### object. The order of row names is the same of col names.
  distance_matrix[index_1,index_2]=matrix[i,3];
  distance_matrix[index_2,index_1]=matrix[i,3];}

for (i in 1:length(distance_matrix[1,])) {
  distance_matrix[i,i]=0
}
###### refine rownames and colnames for distance_matrix
strings=rownames(distance_matrix)
for (i in 1:54){strings[i]=substr(rownames(distance_matrix)[i],1,nchar(rownames(distance_matrix)[i])-4)}
rownames(distance_matrix)=strings
colnames(distance_matrix)=strings
#### creat dist object
dist=as.dist(distance_matrix)


###　plooting with hierachical clustering
##########
### K means clustering
##########
fit=kmeans(distance_matrix,3)

##########
### Hirechical phylogenetic clustering Dendrogram
##########
hc <- hclust(dist, method="average") 
hcd=as.dendrogram(hc)
clusMember = cutree(hc, 5)
labelColors = c( "#75ed51"，"purple"，"#51c3ed", "#036564" ,"#556270")

colLab <- function(n) {
  if (is.leaf(n)) {
    a <- attributes(n)
    labCol <- labelColors[clusMember[which(names(clusMember) == a$label)]]
    attr(n, "nodePar") <- c(a$nodePar, lab.col = labCol)
  }
  n
}
clusDendro = dendrapply(hcd, colLab)
plot(clusDendro, main = "Dendrogram")
axis(side = 2, at = seq(0, 10,2), col = "#F38630", labels = FALSE, lwd = 2)

#####################################################
### plot in 2 different ways, color of the object showing the results of Kmeans clustering
#####################################################
plot(as.phylo(hc),col.lab = "#7C8071",  type='fan',tip.color=labelColors[fit$cluster])

plot(as.phylo(hc), cex = 0.6, tip.color=labelColors[fit$cluster],label.offset = 0.1)
axis(side = 1, at = seq(0, 5,0.5), col = "#F38630", labels = FALSE, lwd = 2)
mtext(rev(seq(0,1,0.1)), side = 1, at = seq(0, 5,0.5), line = 1,  col = "#A38630", las = 2)

####################################################
## find the representative matrix of each classified group using Kmeans clustering
####################################################

##defining number of clusters
set.seed(1)
fit=kmeans(distance_matrix,3)
wss <- (nrow(distance_matrix)-1)*sum(apply(distance_matrix,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(distance_matrix, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")

classify=as.data.frame(fit$cluster)
num_prototype=length(unique(classify[,]))

compute_prototype=function(filename_lists){
  example=read.table(filename_lists[1])
  prototype=matrix(0,dim(example)[1],dim(example)[2])
  for (i in 1:length(filename_lists)){
    prototype=prototype+read.table(filename_lists[i])
  }
  prototype=prototype/length(filename_lists)
  return (prototype)
}

###　compute prototypes for each class of matrices and write to file
###  write another single file containing classification results
dir.create(file.path(getwd(),'prototypes2'), showWarnings = FALSE)
for (i in 1:num_prototype){
  prototype=compute_prototype(rownames(classify)[classify==i])
  write.table(prototype,file=paste(file.path(getwd(),'prototypes2','type'),i,sep=''),sep='\t')
  content=paste(rownames(classify)[classify==i])
  title=paste('the ', i ,' th prototype contains')
  write(title,file='readme',append=T)
  write(content,file='readme',sep='' , append=T)
}
rownames(classify)[classify==2]
matrix=read.table('hEHF.pfm')
matrix2=read.table('hERF.pfm')


###########################################
### tree object
###########################################
library(ape)

tree2=read.tree('tree4.txt')
tree2$tip
color=rep('black',length(tree2$tip))
for (i in 1:length(tree2$tip)){
  color[i]=labelColors[as.data.frame(fit$cluster)[tree2$tip[i],]]
}
color[is.na(color)]='#556270'
plot(tree2,type='fan',tip.color=color,cex=1.2)
plot(tree2,tip.color=color)

#############################
##clustering with affinity propogation
#############################
library(apcluster)
ap=apcluster(distance_matrix)
heatmap(ap,distance_matrix,Colv=FALSE)
ap=apcluster(distance_matrix,details=T)
plot(ap)
agg=aggExCluster(distance_matrix)
plot(agg)
